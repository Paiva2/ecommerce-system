generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique @db.VarChar(50)
  username   String?     @db.VarChar(50)
  password   String?     @db.VarChar(100)
  created_At DateTime?   @default(now())
  store      Store?
  wallet     UserWallet?
  userItems  UserItem[]

  @@map("user")
}

model UserWallet {
  id             String     @id @default(uuid())
  fkwallet_owner String     @unique @db.VarChar(50)
  coins          UserCoin[]

  user User @relation(fields: [fkwallet_owner], references: [id], onDelete: Cascade)

  @@map("user_wallet")
}

model UserCoin {
  id           String    @id @default(uuid())
  coin_name    String    @db.VarChar(50)
  updated_at   DateTime? @default(now())
  fkcoin_owner String    @db.VarChar(50)
  quantity     Decimal   @default(0)

  wallet UserWallet @relation(fields: [fkcoin_owner], references: [id], onDelete: Cascade)

  @@map("user_coin")
}

model UserItem {
  id             String   @id @default(uuid())
  item_name      String   @db.VarChar(50)
  purchase_date  DateTime @default(now())
  purchased_with String   @db.VarChar(50)
  purchased_at   String   @db.VarChar(50)
  fkitem_owner   String   @db.VarChar(50)
  quantity       Decimal  @default(0)
  item_value     Decimal  @default(0)

  user User @relation(fields: [fkitem_owner], references: [id], onDelete: Cascade)

  @@map("user_item")
}

model Store {
  id            String      @id @default(uuid())
  name          String      @db.VarChar(50)
  created_At    DateTime?   @default(now())
  updated_at    DateTime?   @default(now())
  description   String?     @db.VarChar(500)
  fkstore_owner String      @unique @db.VarChar(50)
  store_items   StoreItem[]
  store_coin    StoreCoin?

  user User @relation(fields: [fkstore_owner], references: [email], onDelete: Cascade)

  @@map("store")
}

model StoreCoin {
  id                 String    @id @default(uuid())
  store_coin_name    String    @unique @db.VarChar(50)
  created_At         DateTime? @default(now())
  updated_at         DateTime? @default(now())
  fkstore_coin_owner String    @unique @db.VarChar(50)

  store     Store       @relation(fields: [fkstore_coin_owner], references: [id], onDelete: Cascade)
  StoreItem StoreItem[]

  @@map("store_coin")
}

model StoreItem {
  id                String    @id @default(uuid())
  item_name         String
  value             Decimal
  quantity          Int       @default(1)
  colors            String    @db.VarChar(50)
  sizes             String    @db.VarChar(50)
  item_image        String?
  description       String?   @db.VarChar(500)
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  promotion         Boolean?  @default(false)
  promotional_value Decimal?
  fkstore_id        String
  fkstore_coin      String

  store     Store?     @relation(fields: [fkstore_id], references: [id], onDelete: Cascade)
  storeCoin StoreCoin? @relation(fields: [fkstore_coin], references: [store_coin_name], onDelete: Cascade)

  @@map("store_item")
}
