{
  "openapi": "3.0.3",
  "info": {
    "title": "Voucher API",
    "description": "This is an voucher system API, based on shops. Users can have a little store, and put itens on this store, each item values an voucher, other users can have those vouchers and use them on stores.",
    "contact": {
      "email": "joaovitor.paiva145@hotmail.com"
    },
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "User",
      "description": "User routes"
    },
    {
      "name": "Store",
      "description": "Store routes"
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": ["User"],
        "summary": "Create a new user",
        "description": "Register a new user",
        "requestBody": {
          "description": "Register a new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "New user username",
                    "type": "string",
                    "example": "My Username"
                  },
                  "email": {
                    "description": "New user e-mail",
                    "type": "string",
                    "example": "johndoe@email.com"
                  },
                  "password": {
                    "description": "New user password",
                    "type": "string",
                    "example": "mynewpassword123"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful register."
          },
          "409": {
            "description": "You must provide all information. Username, email, and password. Or User is already registered."
          },
          "403": {
            "description": "Password must have at least 6 characters."
          }
        }
      }
    },

    "/new-password": {
      "patch": {
        "tags": ["User"],
        "summary": "Update an user password",
        "description": "Update an existing user password.",
        "requestBody": {
          "description": "Update an user password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "User email",
                    "type": "string",
                    "example": "johndoe@email.com"
                  },
                  "newPassword": {
                    "description": "New user password",
                    "type": "string",
                    "example": "mynewpassword123"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Password successfully changed."
          },
          "409": {
            "description": "You must provide all informations. Email and password."
          },
          "403": {
            "description": "Password must have at least 6 characters."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },

    "/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login as an user",
        "description": "Login as an existing user. After login, an cookie with an auth token will be setted on your browser, and from now on, you can access auth routes.",
        "requestBody": {
          "description": "Authenticate account user.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "description": "User e-mail",
                    "type": "string",
                    "example": "johndoe@email.com"
                  },
                  "password": {
                    "description": "User password",
                    "type": "string",
                    "example": "mypassword123"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Login success.",
            "headers": {
              "Set-Cookie": {
                "description": "Authentication token.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "You must provide all informations. Email and password."
          },
          "403": {
            "description": "Invalid credentials."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },

    "/profile": {
      "get": {
        "tags": ["User"],
        "summary": "Get an user profile",
        "description": "Get user profile. You must be logged-in before get your profile.",
        "requestBody": {
          "description": "Get an existing use profile informations.",
          "content": {},
          "required": false
        },
        "responses": {
          "200": {
            "description": "User profile informations, an Store will only return if user already has one created"
          },
          "403": {
            "description": "You must provide user an valid user email. Or you have an Invalid token."
          },
          "404": {
            "description": "User not found."
          }
        }
      },
      "patch": {
        "tags": ["User"],
        "summary": "Update user profile",
        "description": "Update your profile. You must be logged-in before.",
        "requestBody": {
          "description": "Update an existing user profile informations (username or password). If you desire to update your password, you should send on the body request the old password value before changing to a new one.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "New Username",
                    "type": "string",
                    "example": "my new username",
                    "required": false
                  },
                  "password": {
                    "description": "New password",
                    "type": "string",
                    "example": "mynewpass123",
                    "required": false
                  },
                  "oldPassword": {
                    "description": "Current password",
                    "type": "string",
                    "example": "mycurrentpass123",
                    "required": false
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Profile updated"
          },
          "403": {
            "description": "Invalid user informations, or you have an Invalid token, or Invalid old password when trying to update the password."
          },
          "404": {
            "description": "User not found."
          }
        }
      }
    },

    "/store": {
      "post": {
        "tags": ["Store"],
        "summary": "Create a new store. You must be logged-in before creating a new store.",
        "description": "Create a new store for an user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "storeName": {
                    "description": "New store name",
                    "type": "string",
                    "example": "My Random Shop"
                  },
                  "storeDescription": {
                    "description": "New store description (optional)",
                    "type": "string",
                    "example": "My random description"
                  },
                  "storeCoin": {
                    "description": "New store coin name",
                    "type": "string",
                    "example": "mystorecoin"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Store created successfully."
          },
          "404": {
            "description": "Store owner not found (e-mail)."
          },
          "403": {
            "description": "Invalid token, or You must provide all informations. Store name and store owner, or User already has an store."
          }
        }
      },

      "get": {
        "tags": ["Store"],
        "summary": "Get all stores.",
        "description": "Get all created stores.",
        "responses": {
          "200": {
            "description": "Operation success."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },

      "patch": {
        "tags": ["Store"],
        "summary": "Update store informations. You must have one store on your account before.",
        "description": "Update user store informations.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "storeUpdate": {
                    "description": "Store informations to update. Description and name are optional.",
                    "type": "object",
                    "properties": {
                      "storeId": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Store updated successfully."
          },
          "403": {
            "description": "Invalid token or invalid user email, or invalid store id or invalid store owner."
          },
          "404": {
            "description": "Store id not found."
          }
        }
      }
    },

    "/store/{storeId}": {
      "get": {
        "tags": ["Store"],
        "summary": "Get a single store by its id.",
        "description": "Insert store id on URL parameter to get a single store.",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "schema": {
              "storeId": {
                "type": "string",
                "example": "Existent store id",
                "description": "Get a single store by its id.",
                "required": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success."
          },
          "403": {
            "description": "Invalid store id."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/store-coin": {
      "post": {
        "tags": ["Store"],
        "summary": "Give store coin to an user.",
        "description": "Give store coin value to an existent user (you need to be logged in as an store before).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userToReceive": {
                    "description": "Email of user that will receive the store coins.",
                    "type": "string",
                    "example": "usertoreceive@example.com"
                  },
                  "valueToGive": {
                    "description": "Value that this user will receive of store coins.",
                    "type": "string",
                    "example": "2000"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Operation success."
          },
          "404": {
            "description": "Store or user to receive not found."
          },
          "409": {
            "description": "You must provide an valid value, greater than 0."
          },
          "403": {
            "description": "You must provide an valid store id (not empty on body)."
          },
          "500": {
            "description": "Operation error."
          }
        }
      },

      "patch": {
        "tags": ["Store"],
        "summary": "Update user store coin full value.",
        "description": "Update user store coins value (you need to be logged in as an store before).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userToUpdate": {
                    "description": "Email of user that will receive the update of store coins.",
                    "type": "string",
                    "example": "usertoupdate@example.com"
                  },
                  "newValue": {
                    "description": "Value that this user will update store coin value.",
                    "type": "string",
                    "example": "2000"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Operation success."
          },
          "404": {
            "description": "Store or user to receive not found, or user hasnt this coin on wallet to update"
          },
          "409": {
            "description": "You must provide an valid value, greater than 0."
          },
          "403": {
            "description": "You must provide an valid store id (not empty on body)."
          },
          "500": {
            "description": "Operation error."
          }
        }
      }
    },
    "/store-item": {
      "post": {
        "tags": ["Store"],
        "summary": "Insert a new item or a list of new itens on a store.",
        "description": "Insert itens on your store (you need to be logged before).",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "itemList": {
                    "description": "List of items to insert.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "itemName": {
                          "type": "string",
                          "example": "Brown shoe"
                        },
                        "value": {
                          "type": "number",
                          "example": 200
                        },
                        "quantity": {
                          "type": "number",
                          "example": 1
                        },
                        "description": {
                          "type": "string",
                          "example": "A beautiful brown shoe."
                        },
                        "promotion": {
                          "type": "boolean",
                          "example": true
                        },
                        "promotionalValue": {
                          "type": "number",
                          "example": 130
                        },
                        "itemImage": {
                          "type": "string",
                          "example": "Your item image URL"
                        },
                        "colors": {
                          "type": "string",
                          "example": "red;green;blue"
                        },
                        "sizes": {
                          "type": "string",
                          "example": "xl;m"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Operation success."
          },
          "403": {
            "description": "Invalid user e-mail."
          },
          "404": {
            "description": "Store not found."
          }
        }
      }
    },

    "/list/{storeId}": {
      "get": {
        "tags": ["Store"],
        "summary": "List items of an store with store id.",
        "description": "Insert store id on URL parameter to get store item list.",
        "parameters": [
          {
            "name": "storeId",
            "in": "path",
            "schema": {
              "storeId": {
                "type": "string",
                "example": "Existent store id",
                "required": true
              }
            }
          },

          {
            "name": "page",
            "in": "query",
            "schema": {
              "page": {
                "type": "number",
                "example": "1",
                "required": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation success."
          },
          "403": {
            "description": "Invalid store id."
          },
          "404": {
            "description": "Store not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },

    "/checkout/store-item": {
      "post": {
        "tags": ["Store"],
        "summary": "Purchase an item or item list.",
        "description": "Purchase items from an store.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "storeId": {
                    "type": "string"
                  },
                  "items": {
                    "description": "List of items to insert.",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "itemId": {
                          "type": "string"
                        },
                        "itemQuantity": {
                          "type": "number",
                          "example": 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Operation success."
          },
          "403": {
            "description": "Invalid storeId or Invalid userId or Invalid item list."
          },
          "404": {
            "description": "User not found or Store not found or Store item not found."
          },
          "409": {
            "description": "Item id can't be empty or Quantity can't be less than 1 or Item quantity unavailable or Invalid user balance."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  }
}
